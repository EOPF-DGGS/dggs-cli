[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "dggs-cli"
version = "0.1.0"
dependencies = ["obstore", "pydantic", "pydantic-settings", "toml", "pydantic-settings-logging", "tqdm"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
]
description = "Command line interface for DGGS data management"
authors = [
    {name = "Henrik Finsberg", email = "henriknf@simula.no"},

]
keywords = ["ESA", "EOPF", "DGGS"]
urls = {Homepage = "https://github.com/EOPF-DGGS/dggs-cli"}


[project.readme]
file = "README.md"
content-type = "text/markdown"


[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
dev = ["pre-commit", "bump-my-version"]


[project.scripts]
dggs-cli = "dggs_cli.cli:main"


[tool.setuptools]
include-package-data = true
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false


[tool.aliases]
test = "pytest"

[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.mypy]
ignore_missing_imports = true



[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    "examples",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "submit.py"
]

# Same as Black.
line-length = 110

# Assume Python 3.10.
target-version = "py312"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = ["E402", "E741", "E743", "E731"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.bumpversion]
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
current_version = "0.1.0"


[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
